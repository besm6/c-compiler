digraph TAC_Structures {
    rankdir=LR;
    node [shape=box];

    // Nodes for each typedef-ed struct
    Tac_Program [label="Tac_Program"];
    Tac_Identifier [label="Tac_Identifier"];
    Tac_TopLevel [label="Tac_TopLevel"];
    Tac_Instruction [label="Tac_Instruction"];
    Tac_Val [label="Tac_Val"];
    Tac_Const [label="Tac_Const"];
    Tac_Type [label="Tac_Type"];
    Tac_StaticInit [label="Tac_StaticInit"];

    // Edges for next pointers (linked lists)
    Tac_Identifier -> Tac_Identifier [label="next", color=blue];
    Tac_TopLevel -> Tac_TopLevel [label="next", color=blue];
    Tac_Instruction -> Tac_Instruction [label="next", color=blue];
    Tac_Val -> Tac_Val [label="next", color=blue];
    Tac_Type -> Tac_Type [label="next", color=blue];
    Tac_StaticInit -> Tac_StaticInit [label="next", color=blue];

    // Edges for other pointer relationships
    Tac_Program -> Tac_TopLevel [label="decls"];
    Tac_TopLevel -> Tac_Identifier [label="function.params"];
    Tac_TopLevel -> Tac_Instruction [label="function.body"];
    Tac_TopLevel -> Tac_Type [label="static_variable.type\nstatic_constant.type"];
    Tac_TopLevel -> Tac_StaticInit [label="static_variable.init_list\nstatic_constant.init"];
    Tac_Instruction -> Tac_Val [label="src/dst/src1/src2\nptr/index/condition/args"];
    Tac_Val -> Tac_Const [label="constant"];
    Tac_Type -> Tac_Type [label="fun_type.params\nfun_type.ret\npointer.referenced\narray.element"];

    // Graph styling
    labelloc="t";
    label="TAC Structure Relationships\n(Blue = next, Black = other pointers)";
}
