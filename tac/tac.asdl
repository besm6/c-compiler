module TAC {
    program = Program(top_level*)

    top_level = Function(identifier, bool global, identifier* params, instruction* body)
              | StaticVariable(identifier, bool global, type t, static_init* init_list)
              | StaticConstant(identifier, type t, static_init init)

    instruction = Return(val?)
                | SignExtend(val src, val dst)
                | Truncate(val src, val dst)
                | ZeroExtend(val src, val dst)
                | DoubleToInt(val src, val dst)
                | DoubleToUInt(val src, val dst)
                | IntToDouble(val src, val dst)
                | UIntToDouble(val src, val dst)
                | Unary(unary_operator, val src, val dst)
                | Binary(binary_operator, val src1, val src2, val dst)
                | Copy(val src, val dst)
                | GetAddress(val src, val dst)
                | Load(val src_ptr, val dst)
                | Store(val src, val dst_ptr)
                | AddPtr(val ptr, val index, int scale, val dst)
                | CopyToOffset(val src, identifier dst, int offset)
                | CopyFromOffset(identifier src, int offset, val dst)
                | Jump(identifier target)
                | JumpIfZero(val condition, identifier target)
                | JumpIfNotZero(val condition, identifier target)
                | Label(identifier)
                | FunCall(identifier fun_name, val* args, val? dst)

    val = Constant(const) | Var(identifier)

    unary_operator = Complement | Negate | Not

    binary_operator = Add | Subtract | Multiply | Divide | Remainder | Equal | NotEqual
                    | LessThan | LessOrEqual | GreaterThan | GreaterOrEqual
}
