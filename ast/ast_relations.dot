//
// This script visualizes the relationships between the structures
// defined in the `ast.h` file. The visualization represents each structure
// as a node and show relationships based on their fields (e.g., pointers
// to other structures via linked lists or direct references).
// - Nodes are labeled with structure names.
// - Edges represent field relationships (labeled with the field name).
// - Linked-list relationships (e.g., `next`) are shown as edges
//   to the same node or related nodes.
// - Subgraphs (clusters) group related structures for clarity
//   (e.g., types, expressions, statements).
//
digraph AST_Structures {
    rankdir=TB;
    node [shape=plaintext, style=filled, fillcolor=lightblue];
    edge [color=navy];

    // Cluster for Type-related structures
    subgraph cluster_types {
        label="Type Structures";
        style=filled;
        fillcolor=lightgrey;

        Type [label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0"><TR><TD>Type</TD></TR></TABLE>>];
        TypeQualifier [label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0"><TR><TD>TypeQualifier</TD></TR></TABLE>>];
        Field [label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0"><TR><TD>Field</TD></TR></TABLE>>];
        Enumerator [label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0"><TR><TD>Enumerator</TD></TR></TABLE>>];
        Param [label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0"><TR><TD>Param</TD></TR></TABLE>>];

        // Type relationships
        Type -> Type [label="u.integer.base (complex)"];
        Type -> Type [label="u.pointer.target"];
        Type -> Type [label="u.array.element"];
        Type -> Type [label="u.function.return_type"];
        Type -> Type [label="u.atomic.base"];
        Type -> TypeQualifier [label="qualifiers"];
        Type -> Field [label="u.struct_t.fields"];
        Type -> Enumerator [label="u.enum_t.enumerators"];
        Type -> Param [label="u.function.params"];

        // Linked-list relationships
        TypeQualifier -> TypeQualifier [label="next"];
        Field -> Field [label="next"];
        Enumerator -> Enumerator [label="next"];
        Param -> Param [label="next"];

        // Field relationships
        Field -> Type [label="type"];
        Field -> Expr [label="bitfield"];
        Param -> Type [label="type"];
    }

    // Cluster for Declaration-related structures
    subgraph cluster_declarations {
        label="Declaration Structures";
        style=filled;
        fillcolor=palegreen;

        Declaration [label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0"><TR><TD>Declaration</TD></TR></TABLE>>];
        DeclSpec [label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0"><TR><TD>DeclSpec</TD></TR></TABLE>>];
        StorageClass [label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0"><TR><TD>StorageClass</TD></TR></TABLE>>];
        FunctionSpec [label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0"><TR><TD>FunctionSpec</TD></TR></TABLE>>];
        AlignmentSpec [label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0"><TR><TD>AlignmentSpec</TD></TR></TABLE>>];
        InitDeclarator [label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0"><TR><TD>InitDeclarator</TD></TR></TABLE>>];
        Initializer [label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0"><TR><TD>Initializer</TD></TR></TABLE>>];
        InitItem [label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0"><TR><TD>InitItem</TD></TR></TABLE>>];
        Designator [label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0"><TR><TD>Designator</TD></TR></TABLE>>];

        // Declaration relationships
        Declaration -> Declaration [label="next"];
        Declaration -> DeclSpec [label="u.var.specifiers"];
        Declaration -> InitDeclarator [label="u.var.declarators"];
        Declaration -> Expr [label="u.static_assrt.condition"];
        Declaration -> Type [label="u.empty.type"];
        DeclSpec -> TypeQualifier [label="qualifiers"];
        DeclSpec -> StorageClass [label="storage"];
        DeclSpec -> FunctionSpec [label="func_specs"];
        DeclSpec -> AlignmentSpec [label="align_spec"];
        AlignmentSpec -> Type [label="u.type"];
        AlignmentSpec -> Expr [label="u.expr"];
        InitDeclarator -> InitDeclarator [label="next"];
        InitDeclarator -> Type [label="type"];
        InitDeclarator -> Initializer [label="init"];
        Initializer -> Expr [label="u.expr"];
        Initializer -> InitItem [label="u.items"];
        InitItem -> InitItem [label="next"];
        InitItem -> Designator [label="designators"];
        InitItem -> Initializer [label="init"];
        Designator -> Designator [label="next"];
        Designator -> Expr [label="u.expr"];
    }

    // Cluster for Expression-related structures
    subgraph cluster_expressions {
        label="Expression Structures";
        style=filled;
        fillcolor=lightyellow;

        Expr [label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0"><TR><TD>Expr</TD></TR></TABLE>>];
        Literal [label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0"><TR><TD>Literal</TD></TR></TABLE>>];
        UnaryOp [label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0"><TR><TD>UnaryOp</TD></TR></TABLE>>];
        BinaryOp [label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0"><TR><TD>BinaryOp</TD></TR></TABLE>>];
        AssignOp [label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0"><TR><TD>AssignOp</TD></TR></TABLE>>];
        GenericAssoc [label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0"><TR><TD>GenericAssoc</TD></TR></TABLE>>];

        // Expression relationships
        Expr -> Expr [label="next"];
        Expr -> Literal [label="u.literal"];
        Expr -> UnaryOp [label="u.unary_op.op"];
        Expr -> Expr [label="u.unary_op.expr"];
        Expr -> BinaryOp [label="u.binary_op.op"];
        Expr -> Expr [label="u.binary_op.left"];
        Expr -> Expr [label="u.binary_op.right"];
        Expr -> Expr [label="u.assign.target"];
        Expr -> AssignOp [label="u.assign.op"];
        Expr -> Expr [label="u.assign.value"];
        Expr -> Expr [label="u.cond.condition"];
        Expr -> Expr [label="u.cond.then_expr"];
        Expr -> Expr [label="u.cond.else_expr"];
        Expr -> Type [label="u.cast.type"];
        Expr -> Expr [label="u.cast.expr"];
        Expr -> Expr [label="u.call.func"];
        Expr -> Expr [label="u.call.args"];
        Expr -> Type [label="u.compound_literal.type"];
        Expr -> InitItem [label="u.compound_literal.init"];
        Expr -> Expr [label="u.field_access.expr"];
        Expr -> Expr [label="u.ptr_access.expr"];
        Expr -> Expr [label="u.post_inc"];
        Expr -> Expr [label="u.post_dec"];
        Expr -> Expr [label="u.sizeof_expr"];
        Expr -> Type [label="u.sizeof_type"];
        Expr -> Type [label="u.align_of"];
        Expr -> Expr [label="u.generic.controlling_expr"];
        Expr -> GenericAssoc [label="u.generic.associations"];
        Expr -> Type [label="type"];
        GenericAssoc -> GenericAssoc [label="next"];
        GenericAssoc -> Type [label="u.type_assoc.type"];
        GenericAssoc -> Expr [label="u.type_assoc.expr"];
        GenericAssoc -> Expr [label="u.default_assoc"];
    }

    // Cluster for Statement-related structures
    subgraph cluster_statements {
        label="Statement Structures";
        style=filled;
        fillcolor=lightpink;

        Stmt [label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0"><TR><TD>Stmt</TD></TR></TABLE>>];
        DeclOrStmt [label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0"><TR><TD>DeclOrStmt</TD></TR></TABLE>>];
        ForInit [label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0"><TR><TD>ForInit</TD></TR></TABLE>>];

        // Statement relationships
        Stmt -> Expr [label="u.expr"];
        Stmt -> DeclOrStmt [label="u.compound"];
        Stmt -> Expr [label="u.if_stmt.condition"];
        Stmt -> Stmt [label="u.if_stmt.then_stmt"];
        Stmt -> Stmt [label="u.if_stmt.else_stmt"];
        Stmt -> Expr [label="u.switch_stmt.expr"];
        Stmt -> Stmt [label="u.switch_stmt.body"];
        Stmt -> Expr [label="u.while_stmt.condition"];
        Stmt -> Stmt [label="u.while_stmt.body"];
        Stmt -> Stmt [label="u.do_while.body"];
        Stmt -> Expr [label="u.do_while.condition"];
        Stmt -> ForInit [label="u.for_stmt.init"];
        Stmt -> Expr [label="u.for_stmt.condition"];
        Stmt -> Expr [label="u.for_stmt.update"];
        Stmt -> Stmt [label="u.for_stmt.body"];
        Stmt -> Stmt [label="u.labeled.stmt"];
        Stmt -> Expr [label="u.case_stmt.expr"];
        Stmt -> Stmt [label="u.case_stmt.stmt"];
        Stmt -> Stmt [label="u.default_stmt"];
        DeclOrStmt -> DeclOrStmt [label="next"];
        DeclOrStmt -> Declaration [label="u.decl"];
        DeclOrStmt -> Stmt [label="u.stmt"];
        ForInit -> Expr [label="u.expr"];
        ForInit -> Declaration [label="u.decl"];
    }

    // Cluster for Program structure
    subgraph cluster_program {
        label="Program Structure";
        style=filled;
        fillcolor=lightcyan;

        Program [label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0"><TR><TD>Program</TD></TR></TABLE>>];
        ExternalDecl [label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0"><TR><TD>ExternalDecl</TD></TR></TABLE>>];

        // Program relationships
        Program -> ExternalDecl [label="decls"];
        ExternalDecl -> ExternalDecl [label="next"];
        ExternalDecl -> Type [label="u.function.type"];
        ExternalDecl -> DeclSpec [label="u.function.specifiers"];
        ExternalDecl -> Declaration [label="u.function.param_decls"];
        ExternalDecl -> Stmt [label="u.function.body"];
        ExternalDecl -> Declaration [label="u.declaration"];
    }
}
