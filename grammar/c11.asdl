#
# This ASDL definition provides a complete, abstract representation
# of the C language as defined in the provided YACC grammar c11.y.
# It captures all syntactic constructs while abstracting away
# concrete syntax, making it suitable for compiler frontends,
# static analysis, or program transformation tools.
#
# Notes and Simplifications:
#  * Preprocessor: The YACC grammar omits preprocessor directives
#    (#define, #include), which are typically handled before parsing.
#    The ASDL assumes preprocessed code, as is standard in AST definitions.
#  * Abstract Declarators: AbstractDeclarator handles type names without
#    identifiers (e.g., int (*)[5]).
#  * K&R Support: IdentList in ParamList supports old-style function
#    declarations (e.g., int f(a, b) int a, b; {}).
#  * Bitfields: Field includes an optional Expr? bitfield for bitfield
#    declarations (e.g., int x:4).
#  * C11 Features: _Generic, _Static_assert, _Alignas, _Atomic,
#    _Thread_local are fully supported.
#  * Simplification: Some YACC details (e.g., trailing commas in initializer
#    lists, specific array syntax variants) are abstracted into unified
#    constructors to keep the ASDL concise.
#
module C {

    # Identifiers and basic types
    Ident = string

    # Types
    Type = Void
         | Bool
         | Char(Signedness signed)
         | Short(Signedness signed)
         | Int(Signedness signed)
         | Long(Signedness signed)
         | Float
         | Double
         | Complex(Type base)                               # _Complex float, _Complex double
         | Imaginary(Type base)                             # _Imaginary (non-mandated extension)
         | Pointer(Type target, TypeQualifier* qualifiers)
         | Array(Type element, Expr? size, TypeQualifier* qualifiers)
         | Function(Type returnType, ParamList params, bool variadic)
         | Struct(Ident? name, Field* fields)
         | Union(Ident? name, Field* fields)
         | Enum(Ident? name, Enumerator* enumerators)
         | TypedefName(Ident name)
         | Atomic(Type base)                                # _Atomic(type_name)
         attributes(TypeQualifier* qualifiers)

    Signedness = Signed | Unsigned

    TypeQualifier = Const
                  | Restrict
                  | Volatile
                  | Atomic

    Field = Field(Ident? name, Type type, Expr? bitfield)   # bitfield is optional for bitfields
          | Anonymous(Type type)                            # anonymous struct/union

    Enumerator = Enumerator(Ident name, Expr? value)

    ParamList = ParamList(Param* params)
              | Empty
              | IdentList(Ident* idents)                    # old-style K&R parameter list

    Param = Param(Ident? name, Type type)

    # Declarations
    Declaration = VarDecl(DeclSpec specifiers, InitDeclarator* declarators)
                | StaticAssert(Expr condition, string message)
                | EmptyDecl                                 # declaration_specifiers ;

    DeclSpec = DeclSpec(StorageClass? storage, TypeQualifier* qualifiers,
                        TypeSpec* typeSpecs, FunctionSpec* funcSpecs,
                        AlignmentSpec? alignSpec)

    StorageClass = Typedef
                 | Extern
                 | Static
                 | ThreadLocal
                 | Auto
                 | Register

    TypeSpec = BasicType(Type type)
             | StructSpec(Ident? name, Field* fields)
             | UnionSpec(Ident? name, Field* fields)
             | EnumSpec(Ident? name, Enumerator* enumerators)
             | TypedefNameSpec(Ident name)
             | AtomicSpec(Type type)

    FunctionSpec = Inline
                 | NoReturn

    AlignmentSpec = AlignAsType(Type type)
                  | AlignAsExpr(Expr expr)

    InitDeclarator = InitDeclarator(Declarator declarator, Initializer? init)

    Declarator = Declarator(Ident name, Pointer* pointers, DeclaratorSuffix* suffixes)
               | AbstractDeclarator(Pointer* pointers, DeclaratorSuffix* suffixes)

    Pointer = Pointer(TypeQualifier* qualifiers)

    DeclaratorSuffix = ArraySuffix(Expr? size, TypeQualifier* qualifiers, bool static)
                     | FunctionSuffix(ParamList params, bool variadic)

    Initializer = Single(Expr expr)
                | Compound(InitItem* items)

    InitItem = InitItem(Designator* designators, Initializer init)

    Designator = ArrayIndex(Expr expr)
               | FieldName(Ident name)

    # Expressions
    Expr = Literal(Literal value)
         | Var(Ident name)
         | UnaryOp(UnaryOp op, Expr expr)
         | BinaryOp(BinaryOp op, Expr left, Expr right)
         | Assign(Expr target, AssignOp op, Expr value)
         | Cond(Expr condition, Expr thenExpr, Expr elseExpr)
         | Cast(Type type, Expr expr)
         | Call(Expr func, Expr* args)
         | CompoundLiteral(Type type, Initializer init)
         | FieldAccess(Expr expr, Ident field)
         | PtrAccess(Expr expr, Ident field)
         | PostInc(Expr expr)
         | PostDec(Expr expr)
         | SizeOfExpr(Expr expr)
         | SizeOfType(Type type)
         | AlignOf(Type type)
         | Generic(Expr controllingExpr, GenericAssoc* associations)
         attributes(Type type)

    Literal = IntLit(int value)
            | FloatLit(float value)
            | CharLit(char value)
            | StringLit(string value)
            | EnumConst(Ident name)

    UnaryOp = Address           # &
            | Deref             # *
            | Plus              # +
            | Neg               # -
            | BitNot            # ~
            | LogNot            # !
            | PreInc            # ++
            | PreDec            # #

    BinaryOp = Mul | Div | Mod
             | Add | Sub
             | LeftShift | RightShift
             | Lt | Gt | Le | Ge
             | Eq | Ne
             | BitAnd | BitXor | BitOr
             | LogAnd | LogOr

    AssignOp = Simple           # =
             | MulAssign        # *=
             | DivAssign        # /=
             | ModAssign        # %=
             | AddAssign        # +=
             | SubAssign        # -=
             | LeftAssign       # <<=
             | RightAssign      # >>=
             | AndAssign        # &=
             | XorAssign        # ^=
             | OrAssign         # |=

    GenericAssoc = TypeAssoc(Type type, Expr expr)
                | DefaultAssoc(Expr expr)

    # Statements
    Stmt = ExprStmt(Expr? expr)
         | Compound(DeclOrStmt* items)
         | If(Expr condition, Stmt thenStmt, Stmt? elseStmt)
         | Switch(Expr expr, Stmt body)
         | While(Expr condition, Stmt body)
         | DoWhile(Stmt body, Expr condition)
         | For(ForInit? init, Expr? condition, Expr? update, Stmt body)
         | Goto(Ident label)
         | Continue
         | Break
         | Return(Expr? expr)
         | Labeled(Ident label, Stmt stmt)
         | Case(Expr expr, Stmt stmt)
         | Default(Stmt stmt)

    DeclOrStmt = Decl(Declaration decl)
               | Stmt(Stmt stmt)

    ForInit = ExprInit(Expr expr)
            | DeclInit(Declaration decl)

    # Program structure
    Program = Program(ExternalDecl* decls)

    ExternalDecl = FunctionDef(DeclSpec specifiers, Declarator declarator,
                               Declaration* decls, Stmt body)
                 | Declaration(Declaration decl)
}
